---
layout: page
title:  "Getting Setup"
date:   2017-02-20 15:56:56 +0800
day: 1
categories: jekyll update
sections:
  - introduction
  - section-2
---
Introduction
======
# Week 1: 
## Monday - HTML , Markup and CSS Objectives
This week we will be learning the building blocks of making basic web pages: HTML and CSS. We will also focus on using the command line and Git to create a daily workflow for our coding projects.

## Agenda + Lesson Objectives

We will begin this week by practicing the command line, Git, Github, and exploring basic HTML. We'll create READMEs to include extra information with our projects on Github. We'll also learn a formatting language called Markdown to format READMEs. Then, we'll explore basic CSS to add styling to our web pages, and actually publish our sites online! Later in the week we will dive deeper into CSS by using divs and spans, floats, cascading, classes, ids, and the box model. Finally, we'll explore a tool called Bootstrap that offers even more powerful styling capability. You're in for a great time!

At the end of this section, you will be able to:
1. Navigate the command line to access and create directories and files
2. Use Git and GitHub to track the creation of static webpages
3. Create a static webpage using HTML
4. Style a static webpage using custom CSS rules in a linked stylesheet
5. Create a project README.md in Markdown
6. Apply Bootstrap rules and classes
7. Adapt a webpage for responsive design

## Independent Project Objectives
At the end of this section you will complete an independent project. Your instructor will review this project for the following objectives:

* Use the most common HTML tags:
  * p, h, ul, ol, li, em, strong, a, img, div, span
* Use Bootstrap classes to style your page
Create a custom-made stylesheet that uses cascading, the box model, and floats
Implement standard indentation and spacing conventions of HTML and CSS
Make Git commits regularly with clear messages that finish the phrase "It willâ€¦"
Add a README to the GitHub repository that includes:
author name
project or program name
description of program
program setup instructions
link to live version of site on GitHub Pages
copyright and license information
Command Line
As a person new to programming, using the terminal interface of a computer may be something you'll do for the first time in this lesson.
We often access computer programs through their Graphical User Interface or GUI. This is simply the visual/graphic component of a computer program. For instance, word processing software generally offers a GUI that contains whitespace for us to type in, a cursor to indicate where we're typing, and a variety of buttons, menus, and options to format our work. This is a GUI. So is an email inbox that displays each email's details, allows us to open an email by clicking on its subject line, and offers buttons to reply and format text.
However, when we are developing we will often use our devices' terminal interface. The terminal is a text-based interface that allows a user to interact with the computer by entering commands on a command line. You have probably navigated through the folders and files on your device using a GUI tool such as Finder on a Mac or Explore on Windows. In this lesson, we'll explore how we can create, update, delete and navigate our folders and files using the terminal interface. We'll also see how using the terminal gives us access to other commands that we do not have when using the GUI tools our computers provide.

Section 2
======
